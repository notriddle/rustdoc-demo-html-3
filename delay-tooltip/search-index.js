var searchIndex = JSON.parse('{\
"testing":{"doc":"","t":"QIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Item","Iterator","Vec","advance_by","all","allocator","any","append","array_chunks","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","by_ref","capacity","chain","clear","clone","clone_from","clone_into","cloned","cmp","cmp","cmp_by","collect","collect_into","copied","count","cycle","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drain_filter","drop","enumerate","eq","eq","eq","eq","eq","eq","eq","eq_by","equivalent","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","filter","filter_map","find","find_map","flat_map","flatten","flush","fmt","fold","for_each","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","fuse","ge","gt","hash","index","index_mut","insert","inspect","intersperse","intersperse_with","into","into_boxed_slice","into_flattened","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","is_write_vectored","last","le","leak","len","lt","map","map_while","max","max_by","max_by_key","min","min_by","min_by_key","ne","ne","ne","ne","ne","ne","ne","new","new_in","next","next_chunk","nth","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","pop","position","product","push","push_within_capacity","reduce","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","rev","rposition","scan","set_len","shrink_to","shrink_to_fit","size_hint","skip","skip_while","spare_capacity_mut","splice","split_at_spare_mut","split_off","step_by","sum","swap_remove","take","take_while","to_owned","truncate","try_collect","try_find","try_fold","try_for_each","try_from","try_into","try_reduce","try_reserve","try_reserve_exact","type_id","unzip","with_capacity","with_capacity_in","write","write_all","write_vectored","zip"],"q":[[0,"testing"]],"d":["The type of the elements being iterated over.","A trait for dealing with iterators.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Returns a reference to the underlying allocator.","Tests if any element of the iterator matches a predicate.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns an iterator over <code>N</code> elements of the iterator at a …","","","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","Extracts a slice containing the entire vector.","","","","","Borrows an iterator, rather than consuming it.","Returns the total number of elements the vector can hold …","Takes two iterators and creates a new iterator over both …","Clears the vector, removing all values.","","","","Creates an iterator which <code>clone</code>s all of its elements.","","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","Creates an iterator which uses a closure to determine if …","","Creates an iterator which gives the current iteration …","","","","","","","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","","","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Convert a boxed slice into a vector by transferring …","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Convert a clone-on-write slice into a vector.","Returns the argument unchanged.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","Creates an iterator which ends after the first <code>None</code>.","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","","","","Inserts an element at position <code>index</code> within the vector, …","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","Creates a consuming iterator, that is, one that moves each …","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Returns <code>true</code> if the vector contains no elements.","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","","Consumes the iterator, returning the last element.","Determines if the elements of this <code>Iterator</code> are …","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","","","","","","","Determines if the elements of this <code>Iterator</code> are not equal …","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","Advances the iterator and returns the next value.","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Removes the last element from a vector and returns it, or …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","Reduces the elements to a single one, by repeatedly …","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Reverses an iterator’s direction.","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Creates an iterator starting at the same point, but …","Sums the elements of an iterator.","Removes an element from the vector and returns it.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","","Shortens the vector, keeping the first <code>len</code> elements and …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","","","Reduces the elements to a single one by repeatedly …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","Converts an iterator of pairs into a pair of containers.","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","‘Zips up’ two iterators into a single iterator of …"],"i":[14,0,0,14,14,8,14,8,14,8,8,8,8,8,8,8,8,8,8,8,8,14,8,14,8,8,8,8,14,8,14,14,14,14,14,14,14,8,8,8,8,8,8,8,8,8,14,8,8,8,8,8,8,14,14,8,8,8,8,8,8,8,8,8,14,14,14,14,14,14,8,8,14,14,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,14,14,8,8,8,8,14,14,14,8,8,8,8,8,8,8,8,8,14,14,14,14,8,14,14,8,8,14,14,14,14,14,14,14,14,14,8,8,8,8,8,8,14,8,8,14,14,14,8,14,14,14,14,14,8,14,14,8,8,14,8,8,8,8,8,8,8,14,14,14,8,8,8,14,14,14,8,8,8,8,14,14,8,14,14,8,8,14,14,14,14,8,8,14,8,8,8,14,8,8,8,8,8,14],"f":[0,0,0,[1,[[3,[2]]]],[[4,5],6],[[[8,[7]]],7],[[4,5],6],[[[8,[7]],[8,[7]]]],[4,[[9,[4]]]],[[[8,[7]]],[[8,[7]]]],[[[8,[7]]],10],[[[8,[7]]]],[[[8,[7]]],10],[[[8,[7]]]],[[[8,[7]]],10],[[[8,[7]]],[[8,[7]]]],[[[8,[7]]],10],[[[8,[7]]],10],[[]],[[[8,[7]]],10],[[]],[4,4],[[[8,[7]]],1],[[4,11],[[12,[4]]]],[[[8,[7]]]],[[[8,[13,[0,[7,13]]]]],[[8,[13,[0,[7,13]]]]]],[[[8,[13,[0,[7,13]]]],[8,[13,[0,[7,13]]]]]],[[]],[[[0,[4,14]]],[[15,[[0,[4,14]]]]]],[[[8,[16,7]],[8,[16,7]]],17],[[4,11],17],[[4,11,5],17],[4,18],[[4,19],19],[[[0,[4,14]]],[[20,[[0,[4,14]]]]]],[4,1],[[[0,[4,13]]],[[21,[[0,[4,13]]]]]],[[[8,[[22,[[22,[[22,[22]]]]]],7]]]],[[[8,[7]],5]],[[[8,[7]],5]],[[],[[8,[23]]]],[[[8,[7]]],10],[[[8,[7]]],10],[[[8,[7]],[24,[1]]],[[25,[7]]]],[[[8,[7]],5],[[26,[5,7]]]],[[[8,[7]]]],[4,[[27,[4]]]],[[[8,[22,7]],10],6],[[[8,[22,7]],28],6],[[[8,[22,7]],28],6],[[[8,[22,7]],[8,[7]]],6],[[[8,[22,7]],10],6],[[[8,[22,7]],10],6],[[4,11],6],[[4,11,5],6],[[],6],[[[8,[7]],11]],[[[8,[29,7]],11]],[[[8,[13,7]],[10,[13]]]],[[[8,[13,7]],[24,[1]]]],[[[8,[7]]]],[[[8,[29,7]],29]],[[[8,[7]],1]],[[[8,[29,7]],1]],[[4,5],[[30,[4,5]]]],[[4,5],[[31,[4,5]]]],[[4,5],32],[[4,5],32],[[4,5],[[33,[4,11,5]]]],[4,[[34,[4]]]],[[[8,[35,7]]],[[3,[36]]]],[[[8,[37,7]],38],[[3,[39]]]],[[4,5]],[[4,5]],[40,[[8,[23]]]],[41,[[8,[35,23]]]],[[[42,[10,7]]],[[8,[7]]]],[28,[[8,[23]]]],[43,[[8,[35,23]]]],[44,[[8,[35,23]]]],[[[45,[7]]],[[8,[7]]]],[[[46,[10]]],[[8,[23]]]],[[]],[[[10,[13]]],[[8,[13,23]]]],[[[10,[13]]],[[8,[13,23]]]],[11,[[8,[23]]]],[[1,1],[[8,[23]]]],[[1,1,7],[[8,[7]]]],[4,[[47,[4]]]],[[4,11],6],[[4,11],6],[[[8,[48,7]],49]],[[[8,[7]],[50,[10]]]],[[[8,[7]],[50,[10]]]],[[[8,[7]],1]],[[4,5],[[51,[4,5]]]],[4,[[52,[4]]]],[[4,5],[[53,[4,5]]]],[[]],[[[8,[7]]],[[42,[10,7]]]],[[[8,[28,7]]],[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]],6],[[4,5],6],[4,6],[[4,5],6],[[4,5],6],[[[8,[35,7]]],6],[4,32],[[4,11],6],[[[8,[7]]],10],[[[8,[7]]],1],[[4,11],6],[[4,5],[[54,[4,5]]]],[[4,5],[[55,[4,5]]]],[4,32],[[4,5],32],[[4,5],32],[4,32],[[4,5],32],[[4,5],32],[[[8,[22,7]],10],6],[[[8,[22,7]],28],6],[[[8,[22,7]],28],6],[[[8,[22,7]],10],6],[[[8,[22,7]],[8,[7]]],6],[[[8,[22,7]],10],6],[[4,11],6],[[],[[8,[23]]]],[7,[[8,[7]]]],[[],32],[4,[[3,[28,56]]]],[1,32],[[[8,[[57,[[57,[[57,[57]]]]]],7]],[8,[[57,[[57,[[57,[57]]]]]],7]]],[[32,[17]]]],[[4,11],[[32,[17]]]],[[4,11,5],[[32,[17]]]],[[4,5]],[[[0,[4,58]],5],1],[4,[[59,[4]]]],[[[8,[7]]],32],[[4,5],[[32,[1]]]],[4,60],[[[8,[7]]]],[[[8,[7]]],3],[[4,5],32],[[[8,[7]],1]],[[[8,[7]],1]],[[[8,[7]],1]],[[[8,[13,7]],1,13]],[[[8,[7]],1,5]],[[[8,[7]],5]],[[[8,[7]],5]],[[[0,[4,58]]],[[61,[[0,[4,58]]]]]],[[[0,[4,62,58]],5],[[32,[1]]]],[[4,5],[[63,[4,5]]]],[[[8,[7]],1]],[[[8,[7]],1]],[[[8,[7]]]],[[]],[[4,1],[[64,[4]]]],[[4,5],[[65,[4,5]]]],[[[8,[7]]],[[10,[66]]]],[[[8,[7]],[24,[1]],11],[[67,[7]]]],[[[8,[7]]]],[[[8,[13,7]],1],[[8,[13,7]]]],[[4,1],[[68,[4]]]],[4,69],[[[8,[7]],1]],[[4,1],[[70,[4]]]],[[4,5],[[71,[4,5]]]],[[]],[[[8,[7]],1]],[4],[[4,5]],[[4,5],72],[[4,5],72],[[],3],[[],3],[[4,5]],[[[8,[7]],1],[[3,[73]]]],[[[8,[7]],1],[[3,[73]]]],[[],74],[[[0,[4,14]]]],[1,[[8,[23]]]],[[1,7],[[8,[7]]]],[[[8,[35,7]],[10,[35]]],[[3,[1,36]]]],[[[8,[35,7]],[10,[35]]],[[3,[36]]]],[[[8,[35,7]],[10,[75]]],[[3,[1,36]]]],[[4,11],[[76,[4]]]]],"c":[],"p":[[15,"usize"],[3,"NonZeroUsize"],[4,"Result"],[8,"Sized"],[8,"FnMut"],[15,"bool"],[8,"Allocator"],[3,"Vec"],[3,"ArrayChunks"],[15,"slice"],[8,"IntoIterator"],[3,"Chain"],[8,"Clone"],[8,"Iterator"],[3,"Cloned"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[8,"Extend"],[3,"Copied"],[3,"Cycle"],[8,"PartialEq"],[3,"Global"],[8,"RangeBounds"],[3,"Drain"],[3,"DrainFilter"],[3,"Enumerate"],[15,"array"],[8,"Copy"],[3,"Filter"],[3,"FilterMap"],[4,"Option"],[3,"FlatMap"],[3,"Flatten"],[15,"u8"],[3,"Error"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[3,"BinaryHeap"],[3,"CString"],[3,"Box"],[3,"String"],[15,"str"],[3,"VecDeque"],[4,"Cow"],[3,"Fuse"],[8,"Hash"],[8,"Hasher"],[8,"SliceIndex"],[3,"Inspect"],[3,"Intersperse"],[3,"IntersperseWith"],[3,"Map"],[3,"MapWhile"],[3,"IntoIter"],[8,"PartialOrd"],[8,"DoubleEndedIterator"],[3,"Peekable"],[8,"Product"],[3,"Rev"],[8,"ExactSizeIterator"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[19,"MaybeUninit"],[3,"Splice"],[3,"StepBy"],[8,"Sum"],[3,"Take"],[3,"TakeWhile"],[8,"Try"],[3,"TryReserveError"],[3,"TypeId"],[3,"IoSlice"],[3,"Zip"]],"a":{"drop_while":[164],"foldl":[72],"inject":[72],"reverse":[156]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
